package reporter

import (
	"fmt"
	"gitlab.bellsoft.net/devops/sre-workbench/go/internal/argus/domain"
	"gitlab.bellsoft.net/devops/sre-workbench/go/pkg/utils/color"
	"sort"
	"strings"
	"time"
)

type ConsoleReporter struct{}

func NewConsoleReporter() *ConsoleReporter {
	return &ConsoleReporter{}
}

func (r *ConsoleReporter) Generate(allResults map[string]domain.AnalysisResult, context, cluster string, startTime time.Time) error {
	var sortedNamespaces []string
	for ns := range allResults {
		sortedNamespaces = append(sortedNamespaces, ns)
	}
	sort.Strings(sortedNamespaces)

	r.printOverallStatistics(allResults, sortedNamespaces)

	r.printSummaryTable(allResults, sortedNamespaces)

	hasManualResources := false
	var manualNamespaces []string
	for _, namespace := range sortedNamespaces {
		result := allResults[namespace]
		if result.ManualResources > 0 {
			hasManualResources = true
			manualNamespaces = append(manualNamespaces, namespace)
		}
	}

	if hasManualResources {
		fmt.Printf("\n%s‚ö†Ô∏è ÏàòÎèô ÏÉùÏÑ±Îêú Î¶¨ÏÜåÏä§Í∞Ä ÏûàÎäî ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§:%s\n", color.Yellow, color.NC)
		for _, ns := range manualNamespaces {
			result := allResults[ns]
			fmt.Printf("  - %s: %dÍ∞ú\n", ns, result.ManualResources)
		}
		fmt.Printf("\n%süí° ÏÉÅÏÑ∏ ÎÇ¥Ïö©ÏùÄ ÏÉùÏÑ±Îêú ÎßàÌÅ¨Îã§Ïö¥ Î≥¥Í≥†ÏÑúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî%s\n", color.Cyan, color.NC)
	} else {
		fmt.Printf("\n%s‚úÖ Î™®Îì† ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Í∞Ä ArgoCDÎ°ú ÏôÑÏ†ÑÌûà Í¥ÄÎ¶¨ÎêòÍ≥† ÏûàÏäµÎãàÎã§!%s\n", color.Green, color.NC)
	}

	elapsed := time.Since(startTime)
	fmt.Printf("\n%s‚è±Ô∏è Ïã§Ìñâ ÏãúÍ∞Ñ: %.2fÏ¥à%s\n", color.Cyan, elapsed.Seconds(), color.NC)

	return nil
}

func (r *ConsoleReporter) printOverallStatistics(allResults map[string]domain.AnalysisResult, sortedNamespaces []string) {
	totalNamespaces := len(sortedNamespaces)
	totalManual := 0
	totalArgoCD := 0
	totalResources := 0
	totalRootResources := 0
	totalExcluded := 0
	completelyManagedNamespaces := 0
	partiallyManagedNamespaces := 0
	unmanagedNamespaces := 0

	for _, result := range allResults {
		totalManual += result.ManualResources
		totalArgoCD += result.ArgoCDManaged
		totalResources += result.TotalResources
		totalRootResources += result.RootResources
		totalExcluded += result.ExcludedDefaults

		if result.RootResources == 0 {
			unmanagedNamespaces++
		} else if result.ManualResources == 0 {
			completelyManagedNamespaces++
		} else if result.ArgoCDManaged > 0 {
			partiallyManagedNamespaces++
		} else {
			unmanagedNamespaces++
		}
	}

	fmt.Printf("\n%süìä Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ%s\n", color.Bold, color.NC)
	fmt.Println(strings.Repeat("=", 60))
	fmt.Printf("Í≤ÄÏÇ¨Ìïú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: %dÍ∞ú\n", totalNamespaces)
	fmt.Printf("Ï†ÑÏ≤¥ Î¶¨ÏÜåÏä§: %dÍ∞ú\n", totalResources)
	fmt.Printf("ÏµúÏÉÅÏúÑ Î¶¨ÏÜåÏä§: %dÍ∞ú\n", totalRootResources)
	fmt.Printf("ArgoCD Í¥ÄÎ¶¨ Î¶¨ÏÜåÏä§: %dÍ∞ú\n", totalArgoCD)
	fmt.Printf("ÏàòÎèô ÏÉùÏÑ± Î¶¨ÏÜåÏä§: %dÍ∞ú\n", totalManual)
	fmt.Printf("Ï†úÏô∏Îêú Í∏∞Î≥∏ Î¶¨ÏÜåÏä§: %dÍ∞ú\n", totalExcluded)
	fmt.Println(strings.Repeat("-", 60))
	fmt.Printf("%sÏôÑÏ†Ñ Í¥ÄÎ¶¨%s ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: %dÍ∞ú\n", color.Green, color.NC, completelyManagedNamespaces)
	fmt.Printf("%sÎ∂ÄÎ∂Ñ Í¥ÄÎ¶¨%s ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: %dÍ∞ú\n", color.Yellow, color.NC, partiallyManagedNamespaces)
	fmt.Printf("%sÎØ∏Í¥ÄÎ¶¨%s ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: %dÍ∞ú\n", color.Red, color.NC, unmanagedNamespaces)
	fmt.Println(strings.Repeat("=", 60))
}

func (r *ConsoleReporter) printSummaryTable(allResults map[string]domain.AnalysisResult, sortedNamespaces []string) {
	fmt.Printf("\n%süìä ÏµúÏ¢Ö Í≤∞Í≥º ÏöîÏïΩ%s\n", color.Bold, color.NC)
	fmt.Println(strings.Repeat("=", 120))

	fmt.Printf("%-30s %-12s %-12s %-15s %-15s %-12s %-15s\n",
		"ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§", "ArgoCD Í¥ÄÎ¶¨", "Ï†ÑÏ≤¥ Î¶¨ÏÜåÏä§", "ÏµúÏÉÅÏúÑ Î¶¨ÏÜåÏä§", "ArgoCD Í¥ÄÎ¶¨ Ï§ë", "ÏàòÎèô ÏÉùÏÑ±", "Í∏∞Î≥∏ Î¶¨ÏÜåÏä§")
	fmt.Println(strings.Repeat("-", 120))

	totalManual := 0
	totalArgoCD := 0
	totalResources := 0
	totalRootResources := 0
	totalExcluded := 0

	for _, namespace := range sortedNamespaces {
		result := allResults[namespace]

		var argoCDManaged string
		if result.RootResources == 0 {
			argoCDManaged = fmt.Sprintf("%s-%s", color.Dim, color.NC)
		} else if result.ManualResources == 0 {
			argoCDManaged = fmt.Sprintf("%s‚úÖ%s", color.Green, color.NC)
		} else if result.ArgoCDManaged > 0 {
			argoCDManaged = fmt.Sprintf("%s‚ö†Ô∏è%s", color.Yellow, color.NC)
		} else {
			argoCDManaged = fmt.Sprintf("%s‚ùå%s", color.Red, color.NC)
		}

		fmt.Printf("%-30s %-20s %-12d %-15d %-15d %-12d %-15d\n",
			namespace,
			argoCDManaged,
			result.TotalResources,
			result.RootResources,
			result.ArgoCDManaged,
			result.ManualResources,
			result.ExcludedDefaults,
		)

		totalManual += result.ManualResources
		totalArgoCD += result.ArgoCDManaged
		totalResources += result.TotalResources
		totalRootResources += result.RootResources
		totalExcluded += result.ExcludedDefaults
	}

	fmt.Println(strings.Repeat("-", 120))
	fmt.Printf("%s%-30s %-20s %-12d %-15d %-15d %-12d %-15d%s\n",
		color.Bold,
		"Ï¥ùÍ≥Ñ",
		"-",
		totalResources,
		totalRootResources,
		totalArgoCD,
		totalManual,
		totalExcluded,
		color.NC,
	)
}
